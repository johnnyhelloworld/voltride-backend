generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Scooter {
  id                  String           @id @default(uuid())
  model               String
  createdAt           DateTime         @default(now())
  batteryCycles       Int
  lastMaintenanceDate DateTime
  mileage             Int
  status              String
  ownerId             String? // ownerId est optionnel
  user                User?            @relation("UserScooters", fields: [ownerId], references: [id]) // user est maintenant optionnel
  Maintenance         Maintenance[]
  isImmobilized       Boolean          @default(false)
  Reservation         Reservation[]
  IncidentReport      IncidentReport[]
}

model Stock {
  id        String @id @default(uuid())
  partName  String @unique
  quantity  Int
  threshold Int?
}

model Maintenance {
  id            String   @id @default(uuid())
  scooterId     String
  date          DateTime
  cost          Float
  notes         String
  partsReplaced String[]
  type          String
  scooter       Scooter  @relation(fields: [scooterId], references: [id])
}

model User {
  id               String           @id @default(uuid())
  email            String           @unique
  password         String
  roles            String[] // Roles can be managed as an array of strings
  name             String?
  licenseNumber    String?
  modelPreferences String[]
  scooters         Scooter[]        @relation("UserScooters") // Added relation to Scooter
  Reservation      Reservation[]
  IncidentReport   IncidentReport[]
}

model Incident {
  id                String    @id @default(uuid())
  scooterId         String
  type              String
  description       String
  reportedAt        DateTime  @default(now())
  resolvedAt        DateTime?
  underWarranty     Boolean   @default(false)
  status            String    @default("pending")
  warrantyExpiresAt DateTime?
  immobilizedDays   Int?
}

model Part {
  id          String   @id @default(uuid())
  name        String
  description String?
  quantity    Int
  minStock    Int      @default(5)
  price       Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Order       Order[]
}

model Order {
  id           String    @id @default(uuid())
  partId       String
  supplier     String
  quantity     Int
  unitPrice    Float
  orderDate    DateTime  @default(now())
  deliveryDate DateTime?
  totalPrice   Float     @default(0)
  status       String    @default("pending")

  part Part @relation(fields: [partId], references: [id])
}

model Reservation {
  id        String   @id @default(uuid())
  scooterId String
  userId    String
  startTime DateTime
  endTime   DateTime
  location  String
  status    String   @default("pending")
  createdAt DateTime @default(now())

  scooter Scooter @relation(fields: [scooterId], references: [id])
  user    User    @relation(fields: [userId], references: [id])
}

model IncidentReport {
  id          String   @id @default(uuid())
  scooterId   String
  userId      String
  description String
  reportedAt  DateTime @default(now())
  status      String   @default("pending")
  severity    String
  location    String
  createdAt   DateTime @default(now())

  scooter Scooter @relation(fields: [scooterId], references: [id])
  user    User    @relation(fields: [userId], references: [id])
}
